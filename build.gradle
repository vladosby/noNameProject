buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE'
    }
}

plugins {
    id "de.aaschmid.cpd" version "0.5"
}

//todo
group 'noNameProject'
version '1.0-SNAPSHOT'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.4.RELEASE'
    }
}

dependencies {
    compile 'org.springframework:spring-core'
    compile 'org.springframework:spring-context'
    //todo
    compile 'commons-logging:commons-logging'
    compile 'org.springframework.data:spring-data-mongodb'
    compile 'org.codehaus.groovy:groovy'
}


pmd {
//    ignoreFailures = true
    consoleOutput = true
    ruleSetFiles = rootProject.files('src/main/resources/com/noname/code/analyse/configs/pmd.xml')
//    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    /*
        Link to ruleSet
        https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/rulesets/java
    */
    toolVersion = '5.5.1'
}

cpdCheck {
    skipLexicalErrors = true
    ignoreAnnotations = true
    minimumTokenCount = 20

    reports {
        text {
            enabled = true
        }
        xml.enabled = false
    }
}


task cpdCheckFailed {
    onlyIf {
        cpdCheck.getState().failure
    }

    doLast {
        String path = cpdCheck.reports.text.destination.toString()
        File file = new File(path)
        println file.text
    }
}

cpdCheck.finalizedBy cpdCheckFailed

checkstyle {
//    configFile = rootProject.files('src/main/resources/com/noname/code/analyse/configs/checkstyle.xml')
    configFile =  rootProject.file('src/main/resources/com/noname/code/analyse/configs/checkstyle.xml')
    reportsDir = file("$project.buildDir/reports/checkstyle")
    toolVersion = '7.1'
}

findbugs {
    toolVersion = '3.0.1'
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}